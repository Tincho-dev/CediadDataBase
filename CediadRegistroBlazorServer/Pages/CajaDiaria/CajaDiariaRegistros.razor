@using CediadDataBase;
@inject RegistrosService service
@page "/"
@page "/CajaDiariaRegistros"
@page "/CajaDiariaRegistros/{SelectedDateParameter}"

<h3>Caja Diaria Registros</h3>
<button @onclick="()=>AddDays(-1)">Anterior</button>
<input type="date" @bind="SelectedDate" @oninput="OnDateChanged" />
<button @onclick="()=>AddDays(1)">Siguiente</button>
@if (Registros != null && Registros.Count > 0)
{
    <p>Total: @Registros.Sum(r => r.Monto)</p>
    <table class="table">
        <thead>
            <tr>
                <th>Monto</th>
                <th>Descripción</th>
                <th>Título</th>
                <th>Categoría</th>
                <th>Método de Pago</th>
                <th>Guardar</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var registro in Registros)
            {
                <FilaRegistroCajaDiaria Registro="registro" OnSubmit="HandleValidSubmit" />
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string? SelectedDateParameter { get; set; }
    public DateTime SelectedDate { get; set; } = DateTime.Today;
    private List<Registro> Registros { get; set; } = new List<Registro>();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(SelectedDateParameter))
        {
            if (DateTime.TryParse(SelectedDateParameter, out DateTime date))
            {
                SelectedDate = date;
            }
        }

        await LoadRecords();
    }

    private async Task LoadRecords()
    {
        Registros = service.GetRegistros(SelectedDate) ?? new List<Registro>();
        Registros.Insert(0, new Registro());
    }

    // Handle date change
    private async Task OnDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime newDate))
        {
            SelectedDate = newDate;
            await LoadRecords();
        }
        Console.WriteLine("Date changed");
    }
    private async Task AddDays(int days)
    {
        SelectedDate = SelectedDate.AddDays(days);
        await LoadRecords();
    }
    private async Task HandleValidSubmit(Registro registro)
    {
        registro.Destino = Destino.DIARIA;
        
        bool success = await service.AddRegistro(registro);
        if (success)
        {
            await LoadRecords(); // Reload records after adding a new one
        }
        else
        {
            // Handle the error case, show an error message, etc.
        }
    }
}
